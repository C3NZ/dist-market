{
  "contractName": "NFTokenMetadataMock",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "NOT_OWNER",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This is an example contract implementation of NFToken with metadata extension.\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"},\"return\":\"Balance of _owner.\"},\"burn(uint256)\":{\"details\":\"Removes a NFT from owner.\",\"params\":{\"_tokenId\":\"Which NFT we want to remove.\"}},\"constructor\":{\"details\":\"Contract constructor.\",\"params\":{\"_name\":\"A descriptive name for a collection of NFTs.\",\"_symbol\":\"An abbreviated name for NFTokens.\"}},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"},\"return\":\"Address that _tokenId is approved for. \"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"},\"return\":\"True if approved for all, false otherwise.\"},\"mint(address,uint256,string)\":{\"details\":\"Mints a new NFT.\",\"params\":{\"_to\":\"The address that will own the minted NFT.\",\"_tokenId\":\"of the NFT to be minted by the msg.sender.\",\"_uri\":\"String representing RFC 3986 URI.\"}},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\",\"return\":\"Representing name. \"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"},\"return\":\"Address of _tokenId owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"return\":\"True if _interfaceID is supported, false otherwise.\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\",\"return\":\"Representing symbol. \"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\"},\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this function just sets data to \\\"\\\"\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/cenz/dev/dapps/dist-market/contracts/mocks/nf-token-metadata-mock.sol\":\"NFTokenMetadataMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/cenz/dev/dapps/dist-market/contracts/math/safe-math.sol\":{\"keccak256\":\"0xe936b6ff43908009400cf525f3b7270759ffdd86b0e3e16d783fe6327cb9d114\",\"urls\":[\"bzzr://2d8aebb931327f2e37ca529d3c2188ec3723aa368ed0d26d27712150d77b8a1f\"]},\"/home/cenz/dev/dapps/dist-market/contracts/mocks/nf-token-metadata-mock.sol\":{\"keccak256\":\"0xc9acf28345adab803ad11902781a22a750a3c1c02b2f394d4b231e14cc7a222f\",\"urls\":[\"bzzr://8bf8f8779ab7915795f3aee94a0bda4f483272092e60743fe5b23f806447c710\"]},\"/home/cenz/dev/dapps/dist-market/contracts/ownership/ownable.sol\":{\"keccak256\":\"0x3626628fad9f85b890894ddeeebcdbb84a53b4ae66dcdd9e763d351b5b8f06a1\",\"urls\":[\"bzzr://2cb9ca9aeb89e26ca2325530db416a6582179b8e18a045769e15a0c1a39bea40\"]},\"/home/cenz/dev/dapps/dist-market/contracts/tokens/erc721-metadata.sol\":{\"keccak256\":\"0x69bf538fbcff5b21f3d3c3bb6e3f5d8bab97009e755b1dc5229e9d4a743cb08c\",\"urls\":[\"bzzr://65d3975a46a5c58a516b88982bca7d27dee9b253ab3a39744302bfbf54d0f362\"]},\"/home/cenz/dev/dapps/dist-market/contracts/tokens/erc721-token-receiver.sol\":{\"keccak256\":\"0xe0e55177d05bc12be9fa851a6382eaa2c6b2f097e53e86a852bdcdb2a11b7c6d\",\"urls\":[\"bzzr://e5df87609151ff5dc6b7d17f1fd54139c580029075f9dc88f359280269029e25\"]},\"/home/cenz/dev/dapps/dist-market/contracts/tokens/erc721.sol\":{\"keccak256\":\"0x16ef833eea7b2363ee4c8497aab83ee5fd1d013ced37de887183ec1cebdd0f3f\",\"urls\":[\"bzzr://ac8a0c9a941c6e58b6a125832c2d36e71afbee27472b02f36f7405d8c6a6f975\"]},\"/home/cenz/dev/dapps/dist-market/contracts/tokens/nf-token-metadata.sol\":{\"keccak256\":\"0x26e79e3b2a3a97ed053bbd73f628735f38e5ccf25955fbbdaec377133494ab6d\",\"urls\":[\"bzzr://a9613a70d318a61ece2cd5b526d92abbfcc3ea4e6847d6e19edbd4014f964182\"]},\"/home/cenz/dev/dapps/dist-market/contracts/tokens/nf-token.sol\":{\"keccak256\":\"0x0c8df921b003b0fce87f9b6a5936eada708edf1e1bfa8773706d36302e297296\",\"urls\":[\"bzzr://74184caf1cf6f1b89bfe7c838b17ea055578161b328c0e0975f682b743f10ee2\"]},\"/home/cenz/dev/dapps/dist-market/contracts/utils/address-utils.sol\":{\"keccak256\":\"0xb3c900fedd972a6c026644f2d0c79d24e351037cfc3a8087725acf1b7c274f14\",\"urls\":[\"bzzr://00822e6b2d99d20a4e3a890e630767720d762d9da024c321bbe75d717a825f38\"]},\"/home/cenz/dev/dapps/dist-market/contracts/utils/erc165.sol\":{\"keccak256\":\"0x16d9fe594763fe1661894f85cbe5e959fecab1a56b415a7607d1e72ac399d479\",\"urls\":[\"bzzr://0a81c80d1ef4ae57eb036a3cc3da90d75ffbc598bc9ca6c40233cee0bd6f0395\"]},\"/home/cenz/dev/dapps/dist-market/contracts/utils/supports-interface.sol\":{\"keccak256\":\"0x31d1dbd3430a09264e505840d2c19b4fbfc80212073aeaf61bd400b630d69ec6\",\"urls\":[\"bzzr://68d8f15c5f510493f95854cd593228652a17a1f0e9b17784f95d4367f33c33dd\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "197:970:4:-;;;424:132;8:9:-1;5:2;;;30:1;27;20:12;5:2;424:132:4;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;424:132:4;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;424:132:4;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;;421:19:16;:31;;;;;:38;;-1:-1:-1;;421:38:16;;;455:4;421:38;;;;;;3882:31:13;:38;;;;;;;;687:31:12;;;;;:38;;;;;;;;;980:5:6;:18;;-1:-1:-1;;;;;;980:18:6;988:10;980:18;;;511:15:4;;424:132;;-1:-1:-1;511:15:4;;-1:-1:-1;511:7:4;;-1:-1:-1;511:15:4;;;;:::i;:::-;-1:-1:-1;532:19:4;;;;:9;;:19;;;;;:::i;:::-;;424:132;;197:970;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;197:970:4;;;-1:-1:-1;197:970:4;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "197:970:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;197:970:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:150:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;677:150:16;-1:-1:-1;;;;;;677:150:16;;:::i;:::-;;;;;;;;;;;;;;;;;;864:100:12;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8::-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;864:100:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8853:160:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8853:160:13;;:::i;:::-;;;;-1:-1:-1;;;;;8853:160:13;;;;;;;;;;;;;;6815:315;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6815:315:13;;;;;;;;:::i;:::-;;6103:300;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6103:300:13;;;;;;;;;;;;;;;;;:::i;5380:157::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5380:157:13;;;;;;;;;;;;;;;;;:::i;1063:101:4:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1063:101:4;;:::i;434:46:6:-;;;:::i;8446:170:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8446:170:13;;:::i;8028:167::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8028:167:13;-1:-1:-1;;;;;8028:167:13;;:::i;:::-;;;;;;;;;;;;;;;;387:43:6;;;:::i;530:20::-;;;:::i;1067:108:12:-;;;:::i;7532:210:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;7532:210:13;;;;;;;;;;:::i;4795:186::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;4795:186:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;4795:186:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4795:186:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;4795:186:13;;-1:-1:-1;4795:186:13;-1:-1:-1;4795:186:13;:::i;1321:158:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1321:158:12;;:::i;772:189:4:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;772:189:4;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;772:189:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;772:189:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;772:189:4;;-1:-1:-1;772:189:4;-1:-1:-1;772:189:4;:::i;9274:169:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;9274:169:13;;;;;;;;;;:::i;1325:210:6:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1325:210:6;-1:-1:-1;;;;;1325:210:6;;:::i;677:150:16:-;-1:-1:-1;;;;;;789:33:16;;768:4;789:33;;;;;;;;;;;;;677:150;;;;:::o;864:100:12:-;952:7;944:15;;;;;;;;-1:-1:-1;;944:15:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;915:19;;944:15;;952:7;;944:15;;952:7;944:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;864:100;:::o;8853:160:13:-;8962:7;3755:19;;;:9;:19;;;;;;8939:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;-1:-1:-1;;8986:22:13;;;;:12;:22;;;;;;-1:-1:-1;;;;;8986:22:13;;8853:160::o;6815:315::-;3051:18;3072:19;;;:9;:19;;;;;;6909:8;;-1:-1:-1;;;;;3072:19:13;3119:10;3105:24;;;:68;;-1:-1:-1;;;;;;3133:28:13;;;;;;:16;:28;;;;;;;;3162:10;3133:40;;;;;;;;;;3105:68;3097:77;;;;;;3786:1;3755:19;;;:9;:19;;;;;;6936:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;6954:18;6975:19;;;:9;:19;;;;;;-1:-1:-1;;;;;6975:19:13;;;;7008:23;;;;;7000:32;;;;;;7039:22;;;;:12;:22;;;;;;:34;;-1:-1:-1;;;;;;7039:34:13;-1:-1:-1;;;;;7039:34:13;;;;;;;;;7084:41;;7039:22;;7084:41;;;;;;;3795:1;3180;6815:315;;;;:::o;6103:300::-;3375:18;3396:19;;;:9;:19;;;;;;6216:8;;-1:-1:-1;;;;;3396:19:13;3450:10;3436:24;;;:70;;-1:-1:-1;3470:22:13;;;;:12;:22;;;;;;-1:-1:-1;;;;;3470:22:13;3496:10;3470:36;3436:70;:120;;;-1:-1:-1;;;;;;3516:28:13;;;;;;:16;:28;;;;;;;;3545:10;3516:40;;;;;;;;;;3436:120;3421:141;;;;;;3786:1;3755:19;;;:9;:19;;;;;;6243:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;6261:18;6282:19;;;:9;:19;;;;;;-1:-1:-1;;;;;6282:19:13;;;;6315;;;;6307:28;;;;;;-1:-1:-1;;;;;6349:17:13;;6341:26;;;;;;6374:24;6384:3;6389:8;6374:9;:24::i;:::-;3795:1;3568;6103:300;;;;;:::o;5380:157::-;5489:43;5507:5;5514:3;5519:8;5489:43;;;;;;;;;;;;:17;:43::i;:::-;5380:157;;;:::o;1063:101:4:-;1134:5:6;;1141:9;;;;;;;;;;;;-1:-1:-1;;;;;1141:9:6;;;;;-1:-1:-1;;;;;1134:5:6;1120:10;:19;1112:39;;;;-1:-1:-1;;;;;1112:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1112:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1138:21:4;1150:8;1138:11;:21::i;:::-;1063:101;:::o;434:46:6:-;;;;;;;;;;;;;;-1:-1:-1;;;;;434:46:6;;;;:::o;8446:170:13:-;8524:14;8557:19;;;:9;:19;;;;;;-1:-1:-1;;;;;8557:19:13;8590:20;8582:29;;;;;8028:167;8106:7;-1:-1:-1;;;;;8131:20:13;;8123:29;;;;;;8165:25;8183:6;8165:17;:25::i;:::-;8158:32;8028:167;-1:-1:-1;;8028:167:13:o;387:43:6:-;;;;;;;;;;;;;;-1:-1:-1;;;;;387:43:6;;;;:::o;530:20::-;;;-1:-1:-1;;;;;530:20:6;;:::o;1067:108:12:-;1161:9;1151:19;;;;;;;;-1:-1:-1;;1151:19:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:21;;1151:19;;1161:9;;1151:19;;1161:9;1151:19;;;;;;;;;;;;;;;;;;;;;;;;7532:210:13;7644:10;7627:28;;;;:16;:28;;;;;;;;-1:-1:-1;;;;;7627:39:13;;;;;;;;;;;;:51;;-1:-1:-1;;7627:51:13;;;;;;;;;;7689:48;;;;;;;7627:39;;7644:10;7689:48;;;;;;;;;;;7532:210;;:::o;4795:186::-;4930:46;4948:5;4955:3;4960:8;4970:5;;4930:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;4930:17:13;;-1:-1:-1;;;4930:46:13:i;:::-;4795:186;;;;;:::o;1321:158:12:-;3786:1:13;3755:19;;;:9;:19;;;;;;1427:13:12;;1404:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;1457:17:12;;;;:7;:17;;;;;;;;;1450:24;;;;;;-1:-1:-1;;1450:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1457:17;;1450:24;;1457:17;1450:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1321:158;;;;:::o;772:189:4:-;1134:5:6;;1141:9;;;;;;;;;;;;-1:-1:-1;;;;;1141:9:6;;;;;-1:-1:-1;;;;;1134:5:6;1120:10;:19;1112:39;;;;-1:-1:-1;;;;;1112:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;1112:39:6;;890:26:4;902:3;907:8;890:11;:26::i;:::-;922:34;941:8;951:4;;922:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;922:18:4;;-1:-1:-1;;;922:34:4:i;:::-;772:189;;;;:::o;9274:169:13:-;-1:-1:-1;;;;;9403:24:13;;;9382:4;9403:24;;;:16;:24;;;;;;;;:35;;;;;;;;;;;;;;;9274:169::o;1325:210:6:-;1134:5;;1141:9;;;;;;;;;;;;-1:-1:-1;;;;;1141:9:6;;;;;-1:-1:-1;;;;;1134:5:6;1120:10;:19;1112:39;;;;-1:-1:-1;;;;;1112:39:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;1112:39:6;-1:-1:-1;1445:12:6;;;;;;;;;;;;-1:-1:-1;;;;;1445:12:6;;;;-1:-1:-1;;;;;1420:23:6;;1412:46;;;;-1:-1:-1;;;;;1412:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;1412:46:6;-1:-1:-1;1490:5:6;;1469:38;;-1:-1:-1;;;;;1469:38:6;;;;1490:5;;1469:38;;1490:5;;1469:38;1513:5;:17;;-1:-1:-1;;;;;;1513:17:6;-1:-1:-1;;;;;1513:17:6;;;;;;;;;;1325:210::o;9626:262:13:-;9709:12;9724:19;;;:9;:19;;;;;;-1:-1:-1;;;;;9724:19:13;9749:24;9734:8;9749:14;:24::i;:::-;9780:30;9795:4;9801:8;9780:14;:30::i;:::-;9816:26;9828:3;9833:8;9816:11;:26::i;:::-;9874:8;9869:3;-1:-1:-1;;;;;9854:29:13;9863:4;-1:-1:-1;;;;;9854:29:13;;;;;;;;;;;9626:262;;;:::o;12843:520::-;3375:18;3396:19;;;:9;:19;;;;;;12984:8;;-1:-1:-1;;;;;3396:19:13;3450:10;3436:24;;;:70;;-1:-1:-1;3470:22:13;;;;:12;:22;;;;;;-1:-1:-1;;;;;3470:22:13;3496:10;3470:36;3436:70;:120;;;-1:-1:-1;;;;;;3516:28:13;;;;;;:16;:28;;;;;;;;3545:10;3516:40;;;;;;;;;;3436:120;3421:141;;;;;;3786:1;3755:19;;;:9;:19;;;;;;13011:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;13029:18;13050:19;;;:9;:19;;;;;;-1:-1:-1;;;;;13050:19:13;;;;13083;;;;13075:28;;;;;;-1:-1:-1;;;;;13117:17:13;;13109:26;;;;;;13142:24;13152:3;13157:8;13142:9;:24::i;:::-;13177:16;:3;-1:-1:-1;;;;;13177:14:13;;:16::i;:::-;13173:186;;;13224:77;;-1:-1:-1;;;;;13224:77:13;;13266:10;13224:77;;;;;;-1:-1:-1;;;;;13224:77:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;13208:13;;13224:41;;;;;;13266:10;;13278:5;;13285:8;;13295:5;;13224:77;;;;;;;;;;;13208:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;13224:77:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13224:77:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13224:77:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13224:77:13;;-1:-1:-1;;;;;;;13317:34:13;;-1:-1:-1;;;;;13317:34:13;13309:43;;;;;;13173:186;;3795:1;3568;12843:520;;;;;;:::o;1872:179:12:-;1934:21;1946:8;1934:11;:21::i;:::-;1972:17;;;;:7;:17;;;;;1966:31;;-1:-1:-1;;1966:31:12;;;;;;;;;;;:36;1962:85;;2023:17;;;;:7;:17;;;;;2016:24;;;:::i;12432:142:13:-;-1:-1:-1;;;;;12542:27:13;12518:7;12542:27;;;:19;:27;;;;;;;12432:142::o;10272:238::-;-1:-1:-1;;;;;10359:17:13;;10351:26;;;;;;10422:1;10391:19;;;:9;:19;;;;;;-1:-1:-1;;;;;10391:19:13;:33;10383:42;;;;;;10432:26;10444:3;10449:8;10432:11;:26::i;:::-;10470:35;;10496:8;;-1:-1:-1;;;;;10470:35:13;;;10487:1;;10470:35;;10487:1;;10470:35;10272:238;;:::o;2436:149:12:-;3786:1:13;3755:19;;;:9;:19;;;;;;2538:8:12;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;2556:17:12;;;;:7;:17;;;;;;;;:24;;;;;;;;:::i;13491:164:13:-;13599:1;13565:22;;;:12;:22;;;;;;-1:-1:-1;;;;;13565:22:13;:36;13561:90;;13622:22;;;;:12;:22;;;;;13615:29;;-1:-1:-1;;;;;;13615:29:13;;;13491:164::o;11428:229::-;11526:19;;;;:9;:19;;;;;;-1:-1:-1;;;;;11526:28:13;;;:19;;:28;11518:37;;;;;;-1:-1:-1;;;;;11590:26:13;;;;;;;:19;:26;;;;;;;;;;-1:-1:-1;;11590:30:13;11561:59;;11633:19;;;11619:1;11633:19;;;11626:26;;-1:-1:-1;;;;;;11626:26:13;;;11428:229::o;11916:228::-;12040:1;12009:19;;;:9;:19;;;;;;-1:-1:-1;;;;;12009:19:13;:33;12001:42;;;;;;12050:19;;;;:9;:19;;;;;;;;:25;;-1:-1:-1;;;;;;12050:25:13;-1:-1:-1;;;;;12050:25:13;;;;;;;;12108:24;;:19;:24;;;;;;;:31;;:28;:31::i;:::-;-1:-1:-1;;;;;12081:24:13;;;;;;;:19;:24;;;;;:58;;;;-1:-1:-1;11916:228:13:o;280:596:14:-;799:18;863:8;;;280:596::o;10903:259:13:-;3786:1;3755:19;;;:9;:19;;;;;;10974:8;;-1:-1:-1;;;;;3755:19:13;3747:42;;;;;;10992:18;11013:19;;;:9;:19;;;;;;-1:-1:-1;;;;;11013:19:13;11038:24;11023:8;11038:14;:24::i;:::-;11068:36;11083:10;11095:8;11068:14;:36::i;:::-;11115:42;;11148:8;;11144:1;;-1:-1:-1;;;;;11115:42:13;;;;;11144:1;;11115:42;3795:1;10903:259;;:::o;2069:177:1:-;2192:19;;;2225:15;;;;2217:24;;;;;197:970:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;197:970:4;;;-1:-1:-1;197:970:4;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity 0.5.6;\n\nimport \"../tokens/nf-token-metadata.sol\";\nimport \"../ownership/ownable.sol\";\n\n/**\n * @dev This is an example contract implementation of NFToken with metadata extension.\n */\ncontract NFTokenMetadataMock is\n  NFTokenMetadata,\n  Ownable\n{\n\n  /**\n   * @dev Contract constructor.\n   * @param _name A descriptive name for a collection of NFTs.\n   * @param _symbol An abbreviated name for NFTokens.\n   */\n  constructor(\n    string memory _name,\n    string memory _symbol\n  )\n    public\n  {\n    nftName = _name;\n    nftSymbol = _symbol;\n  }\n\n  /**\n   * @dev Mints a new NFT.\n   * @param _to The address that will own the minted NFT.\n   * @param _tokenId of the NFT to be minted by the msg.sender.\n   * @param _uri String representing RFC 3986 URI.\n   */\n  function mint(\n    address _to,\n    uint256 _tokenId,\n    string calldata _uri\n  )\n    external\n    onlyOwner\n  {\n    super._mint(_to, _tokenId);\n    super._setTokenUri(_tokenId, _uri);\n  }\n\n  /**\n   * @dev Removes a NFT from owner.\n   * @param _tokenId Which NFT we want to remove.\n   */\n  function burn(\n    uint256 _tokenId\n  )\n    external\n    onlyOwner\n  {\n    super._burn(_tokenId);\n  }\n\n}\n",
  "sourcePath": "/home/cenz/dev/dapps/dist-market/contracts/mocks/nf-token-metadata-mock.sol",
  "ast": {
    "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/mocks/nf-token-metadata-mock.sol",
    "exportedSymbols": {
      "NFTokenMetadataMock": [
        351
      ]
    },
    "id": 352,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 288,
        "literals": [
          "solidity",
          "0.5",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:4"
      },
      {
        "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/tokens/nf-token-metadata.sol",
        "file": "../tokens/nf-token-metadata.sol",
        "id": 289,
        "nodeType": "ImportDirective",
        "scope": 352,
        "sourceUnit": 1003,
        "src": "24:41:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/ownership/ownable.sol",
        "file": "../ownership/ownable.sol",
        "id": 290,
        "nodeType": "ImportDirective",
        "scope": 352,
        "sourceUnit": 442,
        "src": "66:34:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 291,
              "name": "NFTokenMetadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1002,
              "src": "231:15:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFTokenMetadata_$1002",
                "typeString": "contract NFTokenMetadata"
              }
            },
            "id": 292,
            "nodeType": "InheritanceSpecifier",
            "src": "231:15:4"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 293,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 441,
              "src": "250:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$441",
                "typeString": "contract Ownable"
              }
            },
            "id": 294,
            "nodeType": "InheritanceSpecifier",
            "src": "250:7:4"
          }
        ],
        "contractDependencies": [
          441,
          485,
          601,
          1002,
          1632,
          1663,
          1695
        ],
        "contractKind": "contract",
        "documentation": "@dev This is an example contract implementation of NFToken with metadata extension.",
        "fullyImplemented": true,
        "id": 351,
        "linearizedBaseContracts": [
          351,
          441,
          1002,
          485,
          1632,
          1695,
          1663,
          601
        ],
        "name": "NFTokenMetadataMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 309,
              "nodeType": "Block",
              "src": "505:51:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 303,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 301,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 906,
                      "src": "511:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 302,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 296,
                      "src": "521:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "511:15:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 304,
                  "nodeType": "ExpressionStatement",
                  "src": "511:15:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 307,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 305,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 908,
                      "src": "532:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 306,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 298,
                      "src": "544:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "532:19:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 308,
                  "nodeType": "ExpressionStatement",
                  "src": "532:19:4"
                }
              ]
            },
            "documentation": "@dev Contract constructor.\n@param _name A descriptive name for a collection of NFTs.\n@param _symbol An abbreviated name for NFTokens.",
            "id": 310,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 296,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 310,
                  "src": "441:19:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 295,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "441:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 298,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 310,
                  "src": "466:21:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 297,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "466:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "435:56:4"
            },
            "returnParameters": {
              "id": 300,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "505:0:4"
            },
            "scope": 351,
            "src": "424:132:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 335,
              "nodeType": "Block",
              "src": "884:77:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 324,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 312,
                        "src": "902:3:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 325,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "907:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 321,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "890:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 323,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1434,
                      "src": "890:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 326,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "890:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 327,
                  "nodeType": "ExpressionStatement",
                  "src": "890:26:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 331,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "941:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 332,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "951:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 328,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "922:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_setTokenUri",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1001,
                      "src": "922:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "922:34:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 334,
                  "nodeType": "ExpressionStatement",
                  "src": "922:34:4"
                }
              ]
            },
            "documentation": "@dev Mints a new NFT.\n@param _to The address that will own the minted NFT.\n@param _tokenId of the NFT to be minted by the msg.sender.\n@param _uri String representing RFC 3986 URI.",
            "id": 336,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 319,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 318,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 414,
                  "src": "872:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "872:9:4"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 317,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 312,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "791:11:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 311,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "791:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 314,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "808:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 313,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "808:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 316,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "830:20:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 315,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "830:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "785:69:4"
            },
            "returnParameters": {
              "id": 320,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "884:0:4"
            },
            "scope": 351,
            "src": "772:189:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 349,
              "nodeType": "Block",
              "src": "1132:32:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 346,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 338,
                        "src": "1150:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 343,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "1138:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 345,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 984,
                      "src": "1138:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 347,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1138:21:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 348,
                  "nodeType": "ExpressionStatement",
                  "src": "1138:21:4"
                }
              ]
            },
            "documentation": "@dev Removes a NFT from owner.\n@param _tokenId Which NFT we want to remove.",
            "id": 350,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 341,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 340,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 414,
                  "src": "1120:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1120:9:4"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 339,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 338,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 350,
                  "src": "1082:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 337,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1082:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1076:26:4"
            },
            "returnParameters": {
              "id": 342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1132:0:4"
            },
            "scope": 351,
            "src": "1063:101:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 352,
        "src": "197:970:4"
      }
    ],
    "src": "0:1168:4"
  },
  "legacyAST": {
    "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/mocks/nf-token-metadata-mock.sol",
    "exportedSymbols": {
      "NFTokenMetadataMock": [
        351
      ]
    },
    "id": 352,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 288,
        "literals": [
          "solidity",
          "0.5",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:4"
      },
      {
        "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/tokens/nf-token-metadata.sol",
        "file": "../tokens/nf-token-metadata.sol",
        "id": 289,
        "nodeType": "ImportDirective",
        "scope": 352,
        "sourceUnit": 1003,
        "src": "24:41:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/cenz/dev/dapps/dist-market/contracts/ownership/ownable.sol",
        "file": "../ownership/ownable.sol",
        "id": 290,
        "nodeType": "ImportDirective",
        "scope": 352,
        "sourceUnit": 442,
        "src": "66:34:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 291,
              "name": "NFTokenMetadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1002,
              "src": "231:15:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFTokenMetadata_$1002",
                "typeString": "contract NFTokenMetadata"
              }
            },
            "id": 292,
            "nodeType": "InheritanceSpecifier",
            "src": "231:15:4"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 293,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 441,
              "src": "250:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$441",
                "typeString": "contract Ownable"
              }
            },
            "id": 294,
            "nodeType": "InheritanceSpecifier",
            "src": "250:7:4"
          }
        ],
        "contractDependencies": [
          441,
          485,
          601,
          1002,
          1632,
          1663,
          1695
        ],
        "contractKind": "contract",
        "documentation": "@dev This is an example contract implementation of NFToken with metadata extension.",
        "fullyImplemented": true,
        "id": 351,
        "linearizedBaseContracts": [
          351,
          441,
          1002,
          485,
          1632,
          1695,
          1663,
          601
        ],
        "name": "NFTokenMetadataMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 309,
              "nodeType": "Block",
              "src": "505:51:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 303,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 301,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 906,
                      "src": "511:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 302,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 296,
                      "src": "521:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "511:15:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 304,
                  "nodeType": "ExpressionStatement",
                  "src": "511:15:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 307,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 305,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 908,
                      "src": "532:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 306,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 298,
                      "src": "544:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "532:19:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 308,
                  "nodeType": "ExpressionStatement",
                  "src": "532:19:4"
                }
              ]
            },
            "documentation": "@dev Contract constructor.\n@param _name A descriptive name for a collection of NFTs.\n@param _symbol An abbreviated name for NFTokens.",
            "id": 310,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 296,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 310,
                  "src": "441:19:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 295,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "441:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 298,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 310,
                  "src": "466:21:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 297,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "466:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "435:56:4"
            },
            "returnParameters": {
              "id": 300,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "505:0:4"
            },
            "scope": 351,
            "src": "424:132:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 335,
              "nodeType": "Block",
              "src": "884:77:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 324,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 312,
                        "src": "902:3:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 325,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "907:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 321,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "890:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 323,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1434,
                      "src": "890:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 326,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "890:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 327,
                  "nodeType": "ExpressionStatement",
                  "src": "890:26:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 331,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "941:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 332,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "951:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 328,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "922:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_setTokenUri",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1001,
                      "src": "922:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "922:34:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 334,
                  "nodeType": "ExpressionStatement",
                  "src": "922:34:4"
                }
              ]
            },
            "documentation": "@dev Mints a new NFT.\n@param _to The address that will own the minted NFT.\n@param _tokenId of the NFT to be minted by the msg.sender.\n@param _uri String representing RFC 3986 URI.",
            "id": 336,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 319,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 318,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 414,
                  "src": "872:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "872:9:4"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 317,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 312,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "791:11:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 311,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "791:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 314,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "808:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 313,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "808:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 316,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "830:20:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 315,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "830:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "785:69:4"
            },
            "returnParameters": {
              "id": 320,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "884:0:4"
            },
            "scope": 351,
            "src": "772:189:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 349,
              "nodeType": "Block",
              "src": "1132:32:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 346,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 338,
                        "src": "1150:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 343,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1755,
                        "src": "1138:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadataMock_$351",
                          "typeString": "contract super NFTokenMetadataMock"
                        }
                      },
                      "id": 345,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 984,
                      "src": "1138:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 347,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1138:21:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 348,
                  "nodeType": "ExpressionStatement",
                  "src": "1138:21:4"
                }
              ]
            },
            "documentation": "@dev Removes a NFT from owner.\n@param _tokenId Which NFT we want to remove.",
            "id": 350,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 341,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 340,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 414,
                  "src": "1120:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1120:9:4"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 339,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 338,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 350,
                  "src": "1082:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 337,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1082:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1076:26:4"
            },
            "returnParameters": {
              "id": 342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1132:0:4"
            },
            "scope": 351,
            "src": "1063:101:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 352,
        "src": "197:970:4"
      }
    ],
    "src": "0:1168:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-06-18T23:41:03.024Z",
  "devdoc": {
    "details": "This is an example contract implementation of NFToken with metadata extension.",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
        "params": {
          "_owner": "Address for whom to query the balance."
        },
        "return": "Balance of _owner."
      },
      "burn(uint256)": {
        "details": "Removes a NFT from owner.",
        "params": {
          "_tokenId": "Which NFT we want to remove."
        }
      },
      "constructor": {
        "details": "Contract constructor.",
        "params": {
          "_name": "A descriptive name for a collection of NFTs.",
          "_symbol": "An abbreviated name for NFTokens."
        }
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        },
        "return": "Address that _tokenId is approved for. "
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        },
        "return": "True if approved for all, false otherwise."
      },
      "mint(address,uint256,string)": {
        "details": "Mints a new NFT.",
        "params": {
          "_to": "The address that will own the minted NFT.",
          "_tokenId": "of the NFT to be minted by the msg.sender.",
          "_uri": "String representing RFC 3986 URI."
        }
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.",
        "return": "Representing name. "
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        },
        "return": "Address of _tokenId owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "return": "True if _interfaceID is supported, false otherwise."
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.",
        "return": "Representing symbol. "
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
      },
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."
      }
    }
  }
}